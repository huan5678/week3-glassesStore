
.container {
    max-width: 1110px + $gutter-width;
    margin: 0 auto;
    padding-left: $gutter-width / 2;
    padding-right: $gutter-width / 2;

    @include pad {
        max-width: 690px + $gutter-width;
    }

    @include mobile {
        max-width: 345px + $gutter-width;
    }

    &-sm-none {
        @include mobile {
            max-width: 100%;
        }
    }
}

.container-fluid {
    width: 100%;
    margin-left: auto;
    margin-right: auto;
    padding-left: $gutter-width / 2;
    padding-right: $gutter-width / 2;
}

.row {
    display: flex;
    flex-wrap: wrap;
    margin-left: -($gutter-width / 2);
    margin-right: -($gutter-width / 2);
}

.no-gutters {
    margin-left: 0px;
    margin-right: 0px;

    >[class*='col-'] {
        padding-left: 0px;
        padding-right: 0px;
    }
}


@for $i from 1 through $grid-num {
    .col-#{$i} {
        padding-left: $gutter-width/2;
        padding-right: $gutter-width/2;
        max-width: 100% * ($i / $grid-num);
        flex: 0 0 (100% * ($i / $grid-num));
    }
}

@include pad {
    @for $i from 1 through $grid-num {
        .col-md-#{$i} {
            padding-left: $gutter-width/2;
            padding-right: $gutter-width/2;
            max-width: 100% * ($i / $grid-num);
            flex: 0 0 (100% * ($i / $grid-num));
        }
    }
}

@include mobile {
    @for $i from 1 through $grid-num {
        .col-sm-#{$i} {
            padding-left: $gutter-width/2;
            padding-right: $gutter-width/2;
            max-width: 100% * ($i / $grid-num);
            flex: 0 0 (100% * ($i / $grid-num));
        }
    }
}

@each $dp in $displayVal {
    .d-#{$dp} {
        display: #{$dp};
    }
}

@each $dp in $displayVal {
    @include pad {
        .d-md-#{$dp} {
            display: #{$dp};
        }
    }
}

@each $dp in $displayVal {
    @include mobile {
        .d-sm-#{$dp} {
            display: #{$dp};
        }
    }
}


@each $flex in $flex-directionVal {
    .flex-#{$flex} {
        flex-direction: $flex;
    }
}

@each $flex in $flex-directionVal {
    @include pad {
        .flex-md-#{$flex} {
            flex-direction: $flex;
        }
    }
}

@each $flex in $flex-directionVal {
    @include mobile {
        .flex-sm-#{$flex} {
            flex-direction: $flex;
        }
    }
}



@each $flex in $wrapVal {
    .flex-#{$flex} {
        flex-wrap: $flex;
    }
}

@each $flex in $wrapVal {
    @include pad {
        .flex-md-#{$flex} {
            flex-wrap: $flex;
        }
    }
}

@each $flex in $wrapVal {
    @include mobile {
        .flex-sm-#{$flex} {
            flex-wrap: $flex;
        }
    }
}

@each $jc, $val in $justify-contentVal {
    .justify-#{$jc} {
        justify-content: #{$val};
    }
}

@include pad {
    @each $jc, $val in $justify-contentVal {
        .justify-md-#{$jc} {
            justify-content: #{$val};
        }
    }
}

@include mobile {
    @each $jc, $val in $justify-contentVal {
        .justify-sm-#{$jc} {
            justify-content: #{$val};
        }
    }
}

@each $its, $val in $itemsVal {
    .items-#{$its} {
        align-items: #{$val};
    }
}

@each $its, $val in $itemsVal {
    @include pad {
        .items-md-#{$its} {
            align-items: #{$val};
        }
    }
}

@each $its, $val in $itemsVal {
    @include mobile {
        .items-sm-#{$its} {
            align-items: #{$val};
        }
    }
}

@each $ag in $alignVal {
    .align-#{$ag} {
        vertical-align: $ag;
    }
}



@each  $space, $spaceamount in $spacers {
    .gap-#{$space} {
      gap: #{$spaceamount};
    }
  }
  
  @each  $space, $spaceamount in $spacers {
    .gap-md-#{$space} {
      @include pad {
        gap: #{$spaceamount};
      }
    }
  }
  
  @each  $space, $spaceamount in $spacers {
    .gap-sm-#{$space} {
      @include mobile {
        gap: #{$spaceamount};
       }
    }
  }

  @each  $space, $spaceamount in $spacers {
    .row-gap-#{$space} {
      row-gap: #{$spaceamount};
    }
  }
  
  @each  $space, $spaceamount in $spacers {
    .row-gap-md-#{$space} {
      @include pad {
        row-gap: #{$spaceamount};
      }
    }
  }
  
  @each  $space, $spaceamount in $spacers {
    .row-gap-sm-#{$space} {
      @include mobile {
        row-gap: #{$spaceamount};
       }
    }
  }

  @each  $space, $spaceamount in $spacers {
    .column-gap-#{$space} {
      column-gap: #{$spaceamount};
    }
  }
  
  @each  $space, $spaceamount in $spacers {
    .column-gap-md-#{$space} {
      @include pad {
        column-gap: #{$spaceamount};
      }
    }
  }
  
  @each  $space, $spaceamount in $spacers {
    .column-gap-sm-#{$space} {
      @include mobile {
        column-gap: #{$spaceamount};
       }
    }
  }
